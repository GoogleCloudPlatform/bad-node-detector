# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# yamllint disable
{{- $check_time := default (printf "%s" (now | unixEpoch)) .Values.node_match.check_time -}}
{{- $health_check_uniq_str := printf "%s" (toString $check_time) -}}
{{- $health_check_service_name := printf "%s-%s" .Values.service.prefix $health_check_uniq_str -}}
{{- $health_check_job_name := printf "%s-%s" .Values.health_check.name $health_check_uniq_str -}}
{{- $node_list_name := printf "%s-%s" "neper-node-list" $health_check_uniq_str -}}
{{- $expiry_time := int (sub  $check_time (mul .Values.health_check.env.HEALTH_VALIDITY_HOURS 60 60)) -}}
---
apiVersion: v1
kind: Service
metadata:
  name: {{$health_check_service_name}}
spec:
  clusterIP: None  #  clusterIP must be None to create a headless service
  selector:
    name: {{$health_check_job_name}}  # must match Job name
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{$health_check_job_name}}
spec:
  completions: 2
  parallelism: 2
  completionMode: Indexed
  template:
    metadata:
      labels:
        name: {{$health_check_job_name}}
    spec:
      tolerations:
      - operator: "Exists"
      serviceAccountName: {{$node_list_name}}
      subdomain: {{$health_check_service_name}}  # has to match Service name
      restartPolicy: Never
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      volumes:
      - name: tmpfs
        emptyDir: {}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            # Multiple matchExpressions ORed between each other. Statements whithin matchExpressions ANDed.
            - matchExpressions:
              - key: cloud.google.com/gke-accelerator
                operator: Exists
                # It will trigger if label value is expired (default=24h).
                # or label does not exists.
              - key: aiinfra/neper-healthcheck-runtime-sec
                operator: Lt
                values:
                - "{{$expiry_time}}"
              - key: aiinfra/node-not-ready
                operator: DoesNotExist
              # If label is true then it will trigger
              - key: {{ .Values.health_check.test_label.name | quote }}
                operator: In
                values:
                - {{ .Values.health_check.test_label.value | quote }}
            - matchExpressions:
              - key: cloud.google.com/gke-accelerator
                operator: Exists
              - key: aiinfra/neper-healthcheck-runtime-sec
                operator: DoesNotExist
              - key: aiinfra/node-not-ready
                operator: DoesNotExist
              # If label is true then it will trigger
              - key: {{ .Values.health_check.test_label.name | quote }}
                operator: In
                values:
                - {{ .Values.health_check.test_label.value | quote }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            preference:
              matchExpressions:
              - key: aiinfra/neper-healthcheck-runtime-sec
                operator: DoesNotExist
          - weight: 1
            preference:
              matchExpressions:
              - key: aiinfra/neper-healthcheck-runtime-sec
                operator: Lt
                values:
                - "{{$expiry_time}}"
      initContainers:
      - name: get-ip-addrs
        image: {{printf "%s:%s" .Values.health_check.image.repo .Values.health_check.image.tag}}
        command: ["sh", "-c"]
        args:
        - >
          NODE_NAME=$NODE_NAME;
          ANNOTATION=$(curl -k -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" https://$KUBERNETES_SERVICE_HOST:443/api/v1/nodes/$NODE_NAME);
          echo -n $ANNOTATION | jq -r '.metadata.annotations."networking.gke.io/nic-info"' | jq -r '.[] | select(.birthName != "eth0") | .birthIP' > /tmp/ip_addrs;
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: KUBERNETES_SERVICE_HOST
          value: "kubernetes.default.svc"
        - name: KUBERNETES_PORT_443
          value: "443"
        volumeMounts:
        - name: tmpfs
          mountPath: /tmp
      containers:
      - name: neper-healthcheck
        image: {{printf "%s:%s" .Values.health_check.image.repo .Values.health_check.image.tag}}
        imagePullPolicy: Always
        securityContext:
          privileged: true
          capabilities:
            add:
            - SYS_ADMIN
            - SYS_PTRACE
            - IPC_LOCK
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: JOB_NAME
          value: {{$health_check_job_name}}
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SERVICE_NAME
          value: {{$health_check_service_name}}  # has to match Service name
        {{- range $key, $value := .Values.health_check.env}}
        - name: {{ $key | quote }}
          value: {{ $value | quote }}
        {{- end }} # iteration over .env
        volumeMounts:
        - name: tmpfs
          mountPath: /tmp
        resources:
          limits:
            nvidia.com/gpu: !!int 8
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{$node_list_name}}
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{$node_list_name}}
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list", "get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{$node_list_name}}
  namespace: default
subjects:
- kind: ServiceAccount
  name: {{$node_list_name}}
  namespace: default
roleRef:
  kind: ClusterRole
  name: {{$node_list_name}}
  apiGroup: rbac.authorization.k8s.io
