# yamllint disable
{{- $check_time := default (printf "%s" (now | unixEpoch)) .Values.node_match.check_time -}}
{{- $health_check_uniq_str := printf "%s-%s" (toString .Values.node_match.guid) (toString $check_time) -}}
{{- $health_check_job_name := printf "%s-%s" .Values.job.prefix $health_check_uniq_str -}}
{{- $node_list_name := printf "%s-%s" "gpu-node-list" $health_check_uniq_str -}}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $health_check_job_name }}
spec:
  completions: 1
  parallelism: 1
  completionMode: Indexed
  template:
    spec:
      serviceAccountName: {{ $node_list_name }}
      restartPolicy: Never
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            # Multiple matchExpressions ORed between each other. Statements whithin matchExpressions ANDed.
            - matchExpressions:
              - key: cloud.google.com/gke-accelerator
                operator: Exists
                # It will trigger if label value is older than 24 hours (default) ago
                # or label does not exists.
              - key: aiinfra/gpu-healthcheck-valid-till-sec
                operator: Lt
                values:
                - {{ $check_time | quote }}
              - key: aiinfra/node-not-ready
                operator: DoesNotExist
              # If label is true then it will trigger
              - key: {{ .Values.health_check.test_label.name | quote }}
                operator: In
                values:
                - {{ .Values.health_check.test_label.value | quote }}
            - matchExpressions:
              - key: cloud.google.com/gke-accelerator
                operator: Exists
              - key: aiinfra/gpu-healthcheck-valid-till-sec
                operator: DoesNotExist
              - key: aiinfra/node-not-ready
                operator: DoesNotExist
              # If label is true then it will trigger
              - key: {{ .Values.health_check.test_label.name | quote }}
                operator: In
                values:
                - {{ .Values.health_check.test_label.value | quote }}
      tolerations:
      - operator: "Exists"
      volumes:
      - name: nvidia-install-dir-host
        hostPath:
          path: /home/kubernetes/bin/nvidia
      containers:
      - image: {{ printf "%s:%s" .Values.health_check.image.repo .Values.health_check.image.tag }}
        name: "gpu-healthcheck"
        imagePullPolicy: Always
        ports:
        - containerPort: 5555
          hostPort: 5555
        securityContext:
          privileged: true
        volumeMounts:
        - name: nvidia-install-dir-host
          mountPath: /usr/local/nvidia
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        {{- range $key, $value := .Values.health_check.env }}
        - name: {{ $key | quote }}
          value: {{ $value | quote }}
        {{- end }} {{- /* end iteration over .env */}}
        resources:
          limits:
            nvidia.com/gpu: !!int 8
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $node_list_name }}
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ $node_list_name }}
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list", "get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ $node_list_name }}
  namespace: default
subjects:
- kind: ServiceAccount
  name: {{ $node_list_name }}
  namespace: default
roleRef:
  kind: ClusterRole
  name: {{ $node_list_name }}
  apiGroup: rbac.authorization.k8s.io
