service:
  prefix: "nccl-headless-svc"
job:
  prefix: "nccl-healthcheck"

# This is used to create a unique identifer
node_match:
  guid: "xkcd"
  # check_time: "1590303600" # Will automatically be set if not given

health_check:
  name: "nccl-healthcheck"
  image:
    repo: "us-docker.pkg.dev/gce-ai-infra/health-check/nccl-healthcheck"
    tag: "subset"
    pull_policy: "Always"
  env:
    # A3 instance type is a3-highgpu-8g
    INSTANCE_TYPE: "a3-highgpu-8g"
    IMAGE_TAG: "subset"
    ENABLE_TWO_PASS_STRATEGY: "true"
    HEALTH_VALIDITY_HOURS: "24"
    DRY_RUN: "true"
    START_MESSAGE_SIZE: "2G"
    END_MESSAGE_SIZE: "8G"
    ITERATIONS: "5"
    NHOSTS: "2"
    nr: "8"
    # Specific to A3
    LD_LIBRARY_PATH: /usr/local/nvidia/lib64
    BANDWIDTH_THRESHOLD: "60"
    USE_TCPX: "true"
    USE_FASTRAK: "false"
    SECOND_PASS_YAML_FILE: "nccl_secondpass_a3.yaml"
    UNIX_CLIENT_PREFIX: "/run/tcpx"
    # Note A3 (a3-highgpu-8g) has no NCCL_LIB_DIR
    # Note A3 (a3-highgpu-8g) has no NCCL_FASTRAK_USE_SNAP
    # Note A3 (a3-highgpu-8g) has no NCCL_FASTRAK_ENABLE_CONTROL_CHANNEL
    # Note A3 (a3-highgpu-8g) has no NCCL_FASTRAK_NUM_FLOWS
  volumeMounts:
    tcpx_nccl_plugin_volume:
      name: "tcpx-nccl-plugin-volume"
      mountPath: /usr/local/tcpx
    tcp_socket:
      name: "tcpd-socket"
      mountPath: /run/tcpx

# Configuration specific to a3plus
volumes:
  tcpd_socket:
    name: "tcpd-socket"
    hostPath:
      path: "/run/tcpx"
initContainers:
  nccl_plugin_installer:
    name: "nccl-plugin-installer"
    image: "us-docker.pkg.dev/gce-ai-infra/gpudirect-tcpx/nccl-plugin-gpudirecttcpx-dev:v3.1.7"
    imagePullPolicy: "Always"
    volumeMounts:
      name: "tcpx-nccl-plugin-volume"
      mountPath: "/var/lib/tcpx"
tcpd_daemon:
  image: "us-docker.pkg.dev/gce-ai-infra/gpudirect-tcpx/tcpgpudmarxd-dev:v2.0.11"
  imagePullPolicy: "Always"
  command:
  - "bash"
  args:
  - "-c"
  - |
    /tcpgpudmarxd/build/app/tcpgpudmarxd --gpu_nic_preset a3vm --gpu_shmem_type fd --setup_param "--verbose 128 2 0" --uds_path /run/tcpx &
    while [ ! -e "/usr/share/nemo/workload_terminated" ]; do sleep 10; done
    pkill -e "^"tcpgpudmarxd || true
    sleep 10
