service:
  prefix: "nccl-headless-svc"
job:
  prefix: "nccl-healthcheck"

# This is used to create a unique identifer
node_match:
  guid: "xkcd"
  # check_time: "1590303600" # Will automatically be set if not given

health_check:
  name: "nccl-healthcheck"
  image:
    repo: "us-docker.pkg.dev/gce-ai-infra/health-check/nccl-healthcheck"
    tag: "subset"
    pull_policy: "Always"
  env:
    # A3+ instance type is a3-megagpu-8g
    INSTANCE_TYPE: "a3-megagpu-8g"
    IMAGE_TAG: "subset"
    ENABLE_TWO_PASS_STRATEGY: "true"
    HEALTH_VALIDITY_HOURS: "24"
    DRY_RUN: "true"
    START_MESSAGE_SIZE: "2G"
    END_MESSAGE_SIZE: "8G"
    ITERATIONS: "5"
    NHOSTS: "2"
    nr: "8"
    # Specific to A3+
    LD_LIBRARY_PATH: /usr/local/tcpxo/lib64:/usr/local/nvidia/lib64/
    BANDWIDTH_THRESHOLD: "90"
    USE_TCPX: "false"
    USE_FASTRAK: "true"
    SECOND_PASS_YAML_FILE: "nccl_secondpass_a3plus.yaml"
    # Note A3+ (a3-megagpu-8g) has no UNIX_CLIENT_PREFIX
    NCCL_LIB_DIR: /usr/local/nvidia/lib64
    NCCL_FASTRAK_USE_SNAP: "1"
    NCCL_FASTRAK_ENABLE_CONTROL_CHANNEL: "0"
    NCCL_FASTRAK_NUM_FLOWS: "2"
  volumeMounts:
    tcpxo_nccl_plugin_volume:
      name: "tcpxo-nccl-plugin-volume"
      mountPath: /usr/local/tcpxo
    tcpd_socket:
      name: "tcpd-socket"
      mountPath: /tmp

# Configuration specific to a3plus
volumes:
  tcpd_socket:
    name: "tcpd-socket"
    hostPath:
      path: "/run/tcpxo"
initContainers:
  nccl_plugin_installer:
    name: "nccl-plugin-installer"
    image: "us-docker.pkg.dev/gce-ai-infra/gpudirect-tcpxo/nccl-plugin-gpudirecttcpx-dev:v1.0.2"
    imagePullPolicy: "Always"
    volumeMounts:
      name: "tcpxo-nccl-plugin-volume"
      mountPath: "/var/lib/tcpxo"

tcpd_daemon:
  image: "us-docker.pkg.dev/gce-ai-infra/gpudirect-tcpxo/tcpgpudmarxd-dev:v1.0.8"
  imagePullPolicy: "Always"
  command:
  - "bash"
  args:
  - "-c"
  - |
    set -ex
    chmod 755 /fts/entrypoint_rxdm_container.sh
    /fts/entrypoint_rxdm_container.sh --num_hops=2 --num_nics=8  --uid= --alsologtostderr &
    while [ ! -e "/usr/share/nemo/workload_terminated" ]; do echo "waiting for exit signal..."; sleep 10; done
    pkill -e "^"tcpgpudmarxd || true
    sleep 30
